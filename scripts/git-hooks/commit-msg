#!/bin/bash

# Git commit-msg hook to validate commit messages
# This hook validates that the commit message follows the required pattern

# CONFIGURATION - Modify this regex pattern as needed
# Option 1: Simple pattern for feat/fix/update: JIRA-XXX (DEFAULT)
COMMIT_REGEX='^(feat|fix|update|test): JIRA-[0-9]{3,}'

# Option 2: More comprehensive conventional commit format (uncomment to use)
# COMMIT_REGEX='^((build|chore|ci|docs|feat|fix|perf|refactor|revert|style|test)(\(\w+\))?(!)?(: (.*\s*)*))|(Merge (.*\s*)*)|(Initial commit$)'

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print error messages
print_error() {
    printf "${RED}ERROR: %s${NC}\n" "$1"
}

# Function to print success messages
print_success() {
    printf "${GREEN}SUCCESS: %s${NC}\n" "$1"
}

# Function to print warning messages
print_warning() {
    printf "${YELLOW}WARNING: %s${NC}\n" "$1"
}

# Get the commit message from the file
COMMIT_MSG_FILE="$1"

if [ ! -f "$COMMIT_MSG_FILE" ]; then
    print_error "Commit message file not found"
    exit 1
fi

# Read the commit message from the file (first line only for validation)
commit_msg=$(head -n1 "$COMMIT_MSG_FILE")

# Skip merge commits
if echo "$commit_msg" | grep -q "^Merge "; then
    exit 0
fi

# Check if commit message matches the pattern
if ! echo "$commit_msg" | grep -qE "$COMMIT_REGEX"; then
    echo ""
    print_error "Commit message validation failed!"
    echo ""
    echo "Your commit message:"
    echo "  $commit_msg"
    echo ""
    echo "============================================================="
    echo ""
    echo "REQUIRED COMMIT MESSAGE FORMAT:"
    echo ""
    echo "  Option 1 (Simple): <type>: JIRA-XXX <description>"
    echo "    Types: feat, fix, update, test"
    echo "    Example: feat: JIRA-123 Add user authentication"
    echo ""
    echo "  Option 2 (Conventional Commits): <type>(<scope>): <description>"
    echo "    Types: build, chore, ci, docs, feat, fix, perf, refactor, revert, style, test"
    echo "    Example: feat(auth): add OAuth2 integration"
    echo ""
    echo "============================================================="
    echo ""
    echo "COMMIT TYPE GUIDE:"
    echo ""
    echo "  feat:     New feature or functionality"
    echo "  fix:      Bug fix"
    echo "  update:   Updates to existing functionality"
    echo "  build:    Changes to build system or dependencies"
    echo "  chore:    Maintenance tasks, tooling changes"
    echo "  ci:       Continuous integration changes"
    echo "  docs:     Documentation only changes"
    echo "  perf:     Performance improvements"
    echo "  refactor: Code restructuring without changing functionality"
    echo "  revert:   Reverting previous commits"
    echo "  style:    Code style changes (formatting, semicolons, etc)"
    echo "  test:     Adding or updating tests"
    echo ""
    echo "============================================================="
    echo ""
    echo "TIPS:"
    echo "  - To bypass this check: git commit --no-verify (NOT recommended)"
    echo ""
    echo "Current regex pattern being used:"
    echo "  $COMMIT_REGEX"
    echo ""
    echo "To modify the validation pattern, edit:"
    echo "  scripts/git-hooks/commit-msg (line 8 or 11)"
    echo ""
    exit 1
fi

print_success "Commit message validated successfully!"
exit 0