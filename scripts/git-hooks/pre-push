#!/bin/bash

# Git pre-push hook to validate commit messages
# This hook validates that all commit messages follow the required pattern

# CONFIGURATION - Modify this regex pattern as needed
# Option 1: Simple pattern for feat/fix/update: JIRA-XXX
# COMMIT_REGEX='^(feat|fix|update): JIRA-[0-9]{3,}'

# Option 2: More comprehensive conventional commit format
COMMIT_REGEX='^((build|chore|ci|docs|feat|fix|perf|refactor|revert|style|test|¯\\_\(ツ\)_/¯)(\(\w+\))?(!)?(: (.*\s*)*))|(Merge (.*\s*)*)|(Initial commit$)'

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print error messages
print_error() {
    echo -e "${RED}❌ ERROR: $1${NC}"
}

# Function to print success messages
print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

# Function to print warning messages
print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

# Read stdin to get the commits being pushed
remote="$1"
url="$2"

z40=0000000000000000000000000000000000000000

while read local_ref local_sha remote_ref remote_sha
do
    if [ "$local_sha" = $z40 ]
    then
        # Handle delete
        :
    else
        if [ "$remote_sha" = $z40 ]
        then
            # New branch, examine all commits
            range="$local_sha"
        else
            # Update to existing branch, examine new commits
            range="$remote_sha..$local_sha"
        fi

        # Check each commit message
        failed=0
        invalid_commits=""
        
        # Get all commit messages in the range
        while IFS= read -r commit_hash
        do
            # Get the commit message (first line)
            commit_msg=$(git log --format=%s -n 1 "$commit_hash")
            
            # Check if commit message matches the pattern
            if ! echo "$commit_msg" | grep -qE "$COMMIT_REGEX"; then
                failed=1
                invalid_commits="${invalid_commits}\n  - ${commit_hash:0:7}: $commit_msg"
            fi
        done < <(git rev-list "$range")

        if [ $failed -eq 1 ]; then
            echo ""
            print_error "Commit message validation failed!"
            echo ""
            echo "The following commits do not match the required format:"
            echo -e "${RED}${invalid_commits}${NC}"
            echo ""
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo ""
            echo "📝 REQUIRED COMMIT MESSAGE FORMAT:"
            echo ""
            echo "  Option 1 (Simple): <type>: JIRA-XXX <description>"
            echo "    Types: feat, fix, update"
            echo "    Example: feat: JIRA-123 Add user authentication"
            echo ""
            echo "  Option 2 (Conventional Commits): <type>(<scope>): <description>"
            echo "    Types: build, chore, ci, docs, feat, fix, perf, refactor, revert, style, test"
            echo "    Example: feat(auth): add OAuth2 integration"
            echo ""
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo ""
            echo "💡 TIPS:"
            echo "  • Amend your last commit: git commit --amend"
            echo "  • Interactive rebase to fix multiple commits: git rebase -i HEAD~n"
            echo "  • Bypass this check (NOT recommended): git push --no-verify"
            echo ""
            echo "📖 Current regex pattern being used:"
            echo "  $COMMIT_REGEX"
            echo ""
            echo "To modify the validation pattern, edit:"
            echo "  scripts/git-hooks/pre-push (line 9 or 12)"
            echo ""
            exit 1
        fi
    fi
done

print_success "All commit messages validated successfully!"
exit 0